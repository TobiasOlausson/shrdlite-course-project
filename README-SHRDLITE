Files:

Graph.ts: 
An implementation of the A* search algorithm, under the name aStarOriginal (which is not used by default). Also an implementation of Anytime Repairing A*, which is the algorithm used by default. See more under extensions. 

Interpreter.ts: 
An interpreter which recursively goes through the parse and returns all interpretations which match the given parse result. Relations and constraints for each object/relation are also defined here and used in the recursive definition.

Planner.ts: 
Contains heuristics, goal and neighbour functions used by the A* search algorithm. The state and state graph are also defined here. Returns a plan which is derived from an interpretation.


Extensions:

Additional relations: 
"between" used for example in the small world by typing "put the white ball between the blue table and the blue box". Additional constraints and relation checks are implemented that can support three objects. There is the possibility to add more relations which involve two or three objects.

User questions: 
"where is a blue ball?" returns the location of a blue ball. Existance question "is there a blue ball?" returns yes if a blue ball exists in the world. These sentence structures are located in the grammar, the interpreter finds the objects and the result is shown as an alert (followed by an interpretation error).

Clarification questions:
The clarification questions work by showing a list of all possible interpretations, letting the users choose which one to carry out. First, if there are several parses, a clarification question is asked to determine which one to interpret, eg. if the user meant "the ball that is in a box" or just "the ball", when asking "put the ball in a box on the floor". Secondly, during the interpretation, if there are several objects which may fulfill the selected parse, a question is asked to determine which of the objects in the world the user meant. The implementation uses standard Javascript prompts to ask the clarification questions.
