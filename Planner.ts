///<reference path="World.ts"/>
///<reference path="Interpreter.ts"/>
///<reference path="Graph.ts"/>

/** 
* Planner module
*
* The goal of the Planner module is to take the interpetation(s)
* produced by the Interpreter module and to plan a sequence of actions
* for the robot to put the world into a state compatible with the
* user's command, i.e. to achieve what the user wanted.
*/
module Planner {

    //////////////////////////////////////////////////////////////////////
    // exported functions, classes and interfaces/types

    /**
     * Top-level driver for the Planner. Calls `planInterpretation` for each given interpretation generated by the Interpreter. 
     * @param interpretations List of possible interpretations.
     * @param currentState The current state of the world.
     * @returns Augments Interpreter.InterpretationResult with a plan represented by a list of strings.
     */
    export function plan(interpretations : Interpreter.InterpretationResult[], currentState : WorldState) : PlannerResult[] {
        var errors : Error[] = [];
        var plans : PlannerResult[] = [];
        interpretations.forEach((interpretation) => {
            try {
                var result : PlannerResult = <PlannerResult>interpretation;
                result.plan = planInterpretation(result.interpretation, currentState);
                // result.plan.push("new interpretation");
                // result.plan.push(toString(result.interpretation));

                if (result.plan.length == 0) {
                    result.plan.push("That is already true!");
                }
                plans.push(result);
            } catch(err) {
                errors.push(err);
            }
        });
        if (plans.length) {
            return plans;
        } else {
            // only throw the first error found
            throw errors[0];
        }
    }

    export interface PlannerResult extends Interpreter.InterpretationResult {
        plan : string[];
    }

    export function stringify(result : PlannerResult) : string {
        return result.plan.join(", ");
    }

    //////////////////////////////////////////////////////////////////////
    // private functions

    /**
     * @param interpretation The logical interpretation of the user's desired goal. The plan needs to be such that by executing it, the world is put into a state that satisfies this goal.
     * @param state The current world state.
     * @returns Basically, a plan is a
     * stack of strings, which are either system utterances that
     * explain what the robot is doing (e.g. "Moving left") or actual
     * actions for the robot to perform, encoded as "l", "r", "p", or
     * "d".
     */

     var objects : {[s:string]: ObjectDefinition;} = null;
     var interpretation : Interpreter.DNFFormula = null;

    function planInterpretation(interpret : Interpreter.DNFFormula, state : WorldState) : string[] {
        var timeout : number = 10000;

        var plan : string[] = [];
        var cloneState : WorldState = clone(state);

        objects = cloneState.objects;
        interpretation = interpret;

        // heuristics
        // getHeuristics();

        // start state
        

        var startState : State = new State(cloneState.stacks, cloneState.holding, cloneState.arm, null);

        // A* planner (graph, startState, isGoal, heuristics, timeout)
        var path = aStarSearch(new StateGraph(), startState, isGoal, heuristics, timeout);
        path.path.forEach((steat) => {
            if(steat.action != null)
                plan.push(steat.action);
        });

        return plan;
    }

    function heuristics(state : State) : number {
        return 0;
    }

    function isGoal(state : State) : boolean {
        var res = interpretation.some(function (interp) {
            return interp.every(function (literal) {
                if(literal.relation == "holding"){
                    return (literal.args[0] == state.holding);
                }else{
                    return true;
                }
            });
        });
        return res;
    }

    class State {

        constructor(
            public stacks : Stack[], 
            public holding : string, 
            public arm: number, 
            public action :string
        ){}

    }

    class StateGraph implements Graph<State> {

        constructor(){}

        /** Computes the edges that leave from a state. */
        outgoingEdges(state : State) : Edge<State>[] {
            var edges : Edge<State>[] = [];
            ["l", "r", "p", "d"].forEach((action) => {
                var nextState : State = getNextState(action, state);
                if(nextState != null){
                    edges.push({
                        from: state,
                        to: nextState,
                        cost: 1
                    });
                }
            });

            return edges;
        }

        /** A function that compares states. */
        compareNodes (stateA : State, stateB : State) : number {
            var equalStacks : boolean = stateA.stacks == stateB.stacks;
            var equalHolding : boolean = stateA.holding == stateB.holding;
            var equalArms : boolean = stateA.arm == stateB.arm;
            var equalActions : boolean = stateA.action == stateB.action;
            if(equalStacks && equalHolding && equalArms && equalActions){
                return 0;
            }else{
                return -1;
            }
        }
    }

    function getNextState(action : string, state : State) : State {
        var newState = clone(state);
        
        switch(action){
            case "l":
                if(state.arm > 0){
                    return new State(newState.stacks, newState.holding, newState.arm - 1, action);
                }
                break;
            case "r":
                if(state.arm < state.stacks.length - 1){
                    return new State(newState.stacks, newState.holding, newState.arm + 1, action);
                }
                break;
            case "p":
                if(state.holding == null){
                    var x = newState.arm;

                    if(newState.stacks[x].length > 0){
                        var tmp = newState.stacks[x].pop();
                        return new State(newState.stacks, tmp, newState.arm, action);
                    }
                }
                break;
            case "d":
                if(state.holding != null){
                    var x = newState.arm;
                    var length = newState.stacks[x].length;
                    var y = length - 1;

                    if(y > 1){
                        var below : string = newState.stacks[x][y];
                        var belowObject : Parser.Object = objects[below];
                        var ontopObject : Parser.Object = objects[newState.holding];

                        if(Interpreter.constraints(ontopObject, belowObject, "ontop")
                            || Interpreter.constraints(ontopObject, belowObject, "inside")){
                            newState.stacks[x].push(newState.holding);
                            newState.holding = null;
                            newState.action = action;
                            return newState;
                        }
                    } else {
                        newState.stacks[x].push(newState.holding);
                        newState.holding = null;
                        newState.action = action;

                        return newState;
                    }


                }
                break;
            default:
                break;
        }
        return null;
    }

    function clone<T>(obj: T): T {
        return JSON.parse(JSON.stringify(obj));
    }

    function toString(interpretation : Interpreter.DNFFormula) : string{
        var result : string = "";

        for(var i = 0; i < interpretation.length; i++){
            for(var j = 0; j < interpretation[i].length; j++){
                result = result.concat(interpretation[i][j].relation + "(");
                for(var k = 0; k < interpretation[i][j].args.length; k++){
                    result = result.concat(interpretation[i][j].args[k]);
                    if(k + 1  < interpretation[i][j].args.length)
                        result = result.concat(", ");
                }
                result = result.concat(")    ")
            }
        }
        return result;
    }

}
